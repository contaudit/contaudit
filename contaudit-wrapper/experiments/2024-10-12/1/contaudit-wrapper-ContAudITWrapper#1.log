2024-10-13 03:41:37,343 INFO - ContAudITWrapper#1 - Initializing ContAudIT Wrapper...
2024-10-13 03:41:37,354 INFO - ContAudITWrapper#1 - Current directory: /home/ec2-user/Code/ufrgs-poc/contaudit-wrapper.jar
2024-10-13 03:41:39,531 INFO - ContAudITWrapper#1 - Wrapper hash: b7519188ed863d76e5199a8d880bb968bdf9124fad53b871583787e123a7a764
2024-10-13 03:41:39,536 INFO - ContAudITWrapper#1 - Validating Wrapper...
2024-10-13 03:41:41,969 INFO - ContAudITWrapper#1 - Response true
2024-10-13 03:41:42,043 INFO - ContAudITWrapper#1 - Application hash: e36ee2d35f8c4c41bd358782dfb3ac8852b40439d350ff27616f0c18819ce9bf
2024-10-13 03:41:42,044 INFO - ContAudITWrapper#1 - Validating Application...
2024-10-13 03:41:42,632 INFO - ContAudITWrapper#1 - Response true
2024-10-13 03:41:42,635 INFO - ContAudITWrapper#1 - Artifact digital_ocean_k3s.workflow hash: f3ac5924ed7a7262c3561ca6fc845349077df95e4164ac0e113c3ad7509be56e
2024-10-13 03:41:42,641 INFO - ContAudITWrapper#1 - Validating Artifact...
2024-10-13 03:41:43,191 INFO - ContAudITWrapper#1 - Response true
2024-10-13 03:41:43,192 INFO - ContAudITWrapper#1 - Running pre-command actions...
2024-10-13 03:41:43,193 INFO - ContAudITWrapper#1 - Analyzing current environment state...
2024-10-13 03:41:43,200 INFO - ContAudITWrapper#1 - Saving current environment state...
2024-10-13 03:41:43,201 INFO - ContAudITWrapper#1 - Environment state hash: a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a
2024-10-13 03:41:43,201 INFO - ContAudITWrapper#1 - Executing command...
2024-10-13 03:49:27,116 INFO - ContAudITWrapper#1 - Command output: 
2024-10-13 03:41:43.205112146 [executor] Initializing the workflow...
[digital_ocean_k3s_workflow] Checking if kubectl is installed...
[digital_ocean_k3s_workflow] Setting up Kubernetes repository in YUM...
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key
[digital_ocean_k3s_workflow] Installing YUM utility packages and configuring Terraform repository...
Hashicorp Stable - x86_64                        26 kB/s | 1.5 kB     00:00    
Kubernetes                                       14 kB/s | 1.7 kB     00:00    
Package dnf-utils-4.3.0-13.amzn2023.0.4.noarch is already installed.
Dependencies resolved.
Nothing to do.
Complete!
Adding repo from: https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
[digital_ocean_k3s_workflow] Checking if package kubectl is installed...
[digital_ocean_k3s_workflow] kubectl is already installed.
[digital_ocean_k3s_workflow] Cloning DigitalOcean Terraform repository with K3S...
[digital_ocean_k3s_workflow] Defining Terraform variables file...
[digital_ocean_k3s_workflow] Setting up Kubernetes repository in YUM...
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key
[digital_ocean_k3s_workflow] Installing YUM utility packages and configuring Terraform repository...
Hashicorp Stable - x86_64                        40 kB/s | 1.5 kB     00:00    
Kubernetes                                       23 kB/s | 1.7 kB     00:00    
Package dnf-utils-4.3.0-13.amzn2023.0.4.noarch is already installed.
Dependencies resolved.
Nothing to do.
Complete!
Adding repo from: https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
[digital_ocean_k3s_workflow] Checking if package terraform is installed...
[digital_ocean_k3s_workflow] terraform is already installed.
[digital_ocean_k3s_workflow] Initializing Terraform configuration...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing modules...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of digitalocean/digitalocean from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Using previously-installed digitalocean/digitalocean v2.42.0
- Using previously-installed hashicorp/random v3.6.3

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[digital_ocean_k3s_workflow] Applying Terraform recipe...
[0m[1mmodule.ha-k3s.digitalocean_vpc.k3s_vpc: Refreshing state... [id=e6ed4606-6712-46a1-9bd7-75bda8660c1a][0m

[1m[36mNote:[0m[1m Objects have changed outside of Terraform
[0m
Terraform detected the following changes made outside of Terraform since the
last "terraform apply" which may have affected this plan:

[1m  # module.ha-k3s.digitalocean_vpc.k3s_vpc[0m has been deleted
[0m  [31m-[0m[0m resource "digitalocean_vpc" "k3s_vpc" {
      [31m-[0m[0m id          = "e6ed4606-6712-46a1-9bd7-75bda8660c1a" [90m-> null[0m[0m
        name        = "k3s-vpc-01"
        [90m# (6 unchanged attributes hidden)[0m[0m
    }


Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.ha-k3s.digitalocean_database_cluster.k3s[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_database_cluster" "k3s" {
      [32m+[0m[0m database             = (known after apply)
      [32m+[0m[0m engine               = "pg"
      [32m+[0m[0m host                 = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m name                 = "k3s-ext-datastore"
      [32m+[0m[0m node_count           = 1
      [32m+[0m[0m password             = (sensitive value)
      [32m+[0m[0m port                 = (known after apply)
      [32m+[0m[0m private_host         = (known after apply)
      [32m+[0m[0m private_network_uuid = (known after apply)
      [32m+[0m[0m private_uri          = (sensitive value)
      [32m+[0m[0m project_id           = (known after apply)
      [32m+[0m[0m region               = "fra1"
      [32m+[0m[0m size                 = "db-s-1vcpu-1gb"
      [32m+[0m[0m storage_size_mib     = (known after apply)
      [32m+[0m[0m ui_database          = (known after apply)
      [32m+[0m[0m ui_host              = (known after apply)
      [32m+[0m[0m ui_password          = (sensitive value)
      [32m+[0m[0m ui_port              = (known after apply)
      [32m+[0m[0m ui_uri               = (sensitive value)
      [32m+[0m[0m ui_user              = (known after apply)
      [32m+[0m[0m uri                  = (sensitive value)
      [32m+[0m[0m urn                  = (known after apply)
      [32m+[0m[0m user                 = (known after apply)
      [32m+[0m[0m version              = "13"
    }

[1m  # module.ha-k3s.digitalocean_database_firewall.k3s[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_database_firewall" "k3s" {
      [32m+[0m[0m cluster_id = (known after apply)
      [32m+[0m[0m id         = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m created_at = (known after apply)
          [32m+[0m[0m type       = "tag"
          [32m+[0m[0m uuid       = (known after apply)
          [32m+[0m[0m value      = "k3s_server"
        }
    }

[1m  # module.ha-k3s.digitalocean_database_user.dbuser[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_database_user" "dbuser" {
      [32m+[0m[0m access_cert = (sensitive value)
      [32m+[0m[0m access_key  = (sensitive value)
      [32m+[0m[0m cluster_id  = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "k3s_default_user"
      [32m+[0m[0m password    = (sensitive value)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_droplet.k3s_agent[0][0m will be created
[0m  [32m+[0m[0m resource "digitalocean_droplet" "k3s_agent" {
      [32m+[0m[0m backups              = false
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m disk                 = (known after apply)
      [32m+[0m[0m graceful_shutdown    = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image                = "ubuntu-20-04-x64"
      [32m+[0m[0m ipv4_address         = (known after apply)
      [32m+[0m[0m ipv4_address_private = (known after apply)
      [32m+[0m[0m ipv6                 = false
      [32m+[0m[0m ipv6_address         = (known after apply)
      [32m+[0m[0m locked               = (known after apply)
      [32m+[0m[0m memory               = (known after apply)
      [32m+[0m[0m monitoring           = true
      [32m+[0m[0m name                 = (known after apply)
      [32m+[0m[0m price_hourly         = (known after apply)
      [32m+[0m[0m price_monthly        = (known after apply)
      [32m+[0m[0m private_networking   = (known after apply)
      [32m+[0m[0m region               = "fra1"
      [32m+[0m[0m resize_disk          = true
      [32m+[0m[0m size                 = "s-1vcpu-2gb"
      [32m+[0m[0m ssh_keys             = [
          [32m+[0m[0m "e2:99:86:4b:69:fd:85:89:a4:0e:57:05:88:bf:9d:dd",
        ]
      [32m+[0m[0m status               = (known after apply)
      [32m+[0m[0m tags                 = (known after apply)
      [32m+[0m[0m urn                  = (known after apply)
      [32m+[0m[0m user_data            = (sensitive value)
      [32m+[0m[0m vcpus                = (known after apply)
      [32m+[0m[0m volume_ids           = (known after apply)
      [32m+[0m[0m vpc_uuid             = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_droplet.k3s_server[0][0m will be created
[0m  [32m+[0m[0m resource "digitalocean_droplet" "k3s_server" {
      [32m+[0m[0m backups              = false
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m disk                 = (known after apply)
      [32m+[0m[0m graceful_shutdown    = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image                = "ubuntu-20-04-x64"
      [32m+[0m[0m ipv4_address         = (known after apply)
      [32m+[0m[0m ipv4_address_private = (known after apply)
      [32m+[0m[0m ipv6                 = false
      [32m+[0m[0m ipv6_address         = (known after apply)
      [32m+[0m[0m locked               = (known after apply)
      [32m+[0m[0m memory               = (known after apply)
      [32m+[0m[0m monitoring           = true
      [32m+[0m[0m name                 = (known after apply)
      [32m+[0m[0m price_hourly         = (known after apply)
      [32m+[0m[0m price_monthly        = (known after apply)
      [32m+[0m[0m private_networking   = (known after apply)
      [32m+[0m[0m region               = "fra1"
      [32m+[0m[0m resize_disk          = true
      [32m+[0m[0m size                 = "s-1vcpu-2gb"
      [32m+[0m[0m ssh_keys             = [
          [32m+[0m[0m "e2:99:86:4b:69:fd:85:89:a4:0e:57:05:88:bf:9d:dd",
        ]
      [32m+[0m[0m status               = (known after apply)
      [32m+[0m[0m tags                 = (known after apply)
      [32m+[0m[0m urn                  = (known after apply)
      [32m+[0m[0m user_data            = (sensitive value)
      [32m+[0m[0m vcpus                = (known after apply)
      [32m+[0m[0m volume_ids           = (known after apply)
      [32m+[0m[0m vpc_uuid             = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_droplet.k3s_server_init[0][0m will be created
[0m  [32m+[0m[0m resource "digitalocean_droplet" "k3s_server_init" {
      [32m+[0m[0m backups              = false
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m disk                 = (known after apply)
      [32m+[0m[0m graceful_shutdown    = false
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image                = "ubuntu-20-04-x64"
      [32m+[0m[0m ipv4_address         = (known after apply)
      [32m+[0m[0m ipv4_address_private = (known after apply)
      [32m+[0m[0m ipv6                 = false
      [32m+[0m[0m ipv6_address         = (known after apply)
      [32m+[0m[0m locked               = (known after apply)
      [32m+[0m[0m memory               = (known after apply)
      [32m+[0m[0m monitoring           = true
      [32m+[0m[0m name                 = (known after apply)
      [32m+[0m[0m price_hourly         = (known after apply)
      [32m+[0m[0m price_monthly        = (known after apply)
      [32m+[0m[0m private_networking   = (known after apply)
      [32m+[0m[0m region               = "fra1"
      [32m+[0m[0m resize_disk          = true
      [32m+[0m[0m size                 = "s-1vcpu-2gb"
      [32m+[0m[0m ssh_keys             = [
          [32m+[0m[0m "e2:99:86:4b:69:fd:85:89:a4:0e:57:05:88:bf:9d:dd",
        ]
      [32m+[0m[0m status               = (known after apply)
      [32m+[0m[0m tags                 = (known after apply)
      [32m+[0m[0m urn                  = (known after apply)
      [32m+[0m[0m user_data            = (sensitive value)
      [32m+[0m[0m vcpus                = (known after apply)
      [32m+[0m[0m volume_ids           = (known after apply)
      [32m+[0m[0m vpc_uuid             = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_firewall.ccm_firewall[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_firewall" "ccm_firewall" {
      [32m+[0m[0m created_at      = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m name            = "ccm-firewall"
      [32m+[0m[0m pending_changes = (known after apply)
      [32m+[0m[0m status          = (known after apply)

      [32m+[0m[0m outbound_rule {
          [32m+[0m[0m destination_addresses          = [
              [32m+[0m[0m "0.0.0.0/0",
              [32m+[0m[0m "::/0",
            ]
          [32m+[0m[0m destination_droplet_ids        = []
          [32m+[0m[0m destination_kubernetes_ids     = []
          [32m+[0m[0m destination_load_balancer_uids = []
          [32m+[0m[0m destination_tags               = []
          [32m+[0m[0m protocol                       = "icmp"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
    }

[1m  # module.ha-k3s.digitalocean_firewall.k3s_firewall[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_firewall" "k3s_firewall" {
      [32m+[0m[0m created_at      = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m name            = "k3s-firewall"
      [32m+[0m[0m pending_changes = (known after apply)
      [32m+[0m[0m status          = (known after apply)
      [32m+[0m[0m tags            = [
          [32m+[0m[0m "k3s_agent",
          [32m+[0m[0m "k3s_server",
        ]

      [32m+[0m[0m inbound_rule {
          [32m+[0m[0m protocol                  = "icmp"
          [32m+[0m[0m source_addresses          = [
              [32m+[0m[0m "10.10.10.0/24",
            ]
          [32m+[0m[0m source_droplet_ids        = []
          [32m+[0m[0m source_kubernetes_ids     = []
          [32m+[0m[0m source_load_balancer_uids = []
          [32m+[0m[0m source_tags               = []
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m inbound_rule {
          [32m+[0m[0m port_range                = "1-65535"
          [32m+[0m[0m protocol                  = "tcp"
          [32m+[0m[0m source_addresses          = [
              [32m+[0m[0m "10.10.10.0/24",
            ]
          [32m+[0m[0m source_droplet_ids        = []
          [32m+[0m[0m source_kubernetes_ids     = []
          [32m+[0m[0m source_load_balancer_uids = []
          [32m+[0m[0m source_tags               = []
        }
      [32m+[0m[0m inbound_rule {
          [32m+[0m[0m port_range                = "1-65535"
          [32m+[0m[0m protocol                  = "udp"
          [32m+[0m[0m source_addresses          = [
              [32m+[0m[0m "10.10.10.0/24",
            ]
          [32m+[0m[0m source_droplet_ids        = []
          [32m+[0m[0m source_kubernetes_ids     = []
          [32m+[0m[0m source_load_balancer_uids = []
          [32m+[0m[0m source_tags               = []
        }
      [32m+[0m[0m inbound_rule {
          [32m+[0m[0m port_range                = "22"
          [32m+[0m[0m protocol                  = "tcp"
          [32m+[0m[0m source_addresses          = [
              [32m+[0m[0m "0.0.0.0/0",
              [32m+[0m[0m "::/0",
            ]
          [32m+[0m[0m source_droplet_ids        = []
          [32m+[0m[0m source_kubernetes_ids     = []
          [32m+[0m[0m source_load_balancer_uids = []
          [32m+[0m[0m source_tags               = []
        }

      [32m+[0m[0m outbound_rule {
          [32m+[0m[0m destination_addresses          = [
              [32m+[0m[0m "0.0.0.0/0",
              [32m+[0m[0m "::/0",
            ]
          [32m+[0m[0m destination_droplet_ids        = []
          [32m+[0m[0m destination_kubernetes_ids     = []
          [32m+[0m[0m destination_load_balancer_uids = []
          [32m+[0m[0m destination_tags               = []
          [32m+[0m[0m port_range                     = "1-65535"
          [32m+[0m[0m protocol                       = "tcp"
        }
      [32m+[0m[0m outbound_rule {
          [32m+[0m[0m destination_addresses          = [
              [32m+[0m[0m "0.0.0.0/0",
              [32m+[0m[0m "::/0",
            ]
          [32m+[0m[0m destination_droplet_ids        = []
          [32m+[0m[0m destination_kubernetes_ids     = []
          [32m+[0m[0m destination_load_balancer_uids = []
          [32m+[0m[0m destination_tags               = []
          [32m+[0m[0m port_range                     = "1-65535"
          [32m+[0m[0m protocol                       = "udp"
        }
    }

[1m  # module.ha-k3s.digitalocean_loadbalancer.k3s_lb[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_loadbalancer" "k3s_lb" {
      [32m+[0m[0m algorithm                        = "round_robin"
      [32m+[0m[0m disable_lets_encrypt_dns_records = false
      [32m+[0m[0m droplet_ids                      = (known after apply)
      [32m+[0m[0m droplet_tag                      = "k3s_server"
      [32m+[0m[0m enable_backend_keepalive         = false
      [32m+[0m[0m enable_proxy_protocol            = false
      [32m+[0m[0m http_idle_timeout_seconds        = (known after apply)
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ip                               = (known after apply)
      [32m+[0m[0m name                             = "k3s-api-loadbalancer"
      [32m+[0m[0m project_id                       = (known after apply)
      [32m+[0m[0m redirect_http_to_https           = false
      [32m+[0m[0m region                           = "fra1"
      [32m+[0m[0m size_unit                        = (known after apply)
      [32m+[0m[0m status                           = (known after apply)
      [32m+[0m[0m target_load_balancer_ids         = (known after apply)
      [32m+[0m[0m urn                              = (known after apply)
      [32m+[0m[0m vpc_uuid                         = (known after apply)

      [32m+[0m[0m domains (known after apply)

      [32m+[0m[0m firewall (known after apply)

      [32m+[0m[0m forwarding_rule {
          [32m+[0m[0m certificate_id   = (known after apply)
          [32m+[0m[0m certificate_name = (known after apply)
          [32m+[0m[0m entry_port       = 6443
          [32m+[0m[0m entry_protocol   = "https"
          [32m+[0m[0m target_port      = 6443
          [32m+[0m[0m target_protocol  = "https"
          [32m+[0m[0m tls_passthrough  = true
        }

      [32m+[0m[0m glb_settings (known after apply)

      [32m+[0m[0m healthcheck {
          [32m+[0m[0m check_interval_seconds   = 10
          [32m+[0m[0m healthy_threshold        = 5
          [32m+[0m[0m port                     = 6443
          [32m+[0m[0m protocol                 = "tcp"
          [32m+[0m[0m response_timeout_seconds = 5
          [32m+[0m[0m unhealthy_threshold      = 3
        }

      [32m+[0m[0m sticky_sessions (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_project.k3s_cluster[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_project" "k3s_cluster" {
      [32m+[0m[0m created_at  = (known after apply)
      [32m+[0m[0m description = "k3s Cluster"
      [32m+[0m[0m environment = "Development"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m is_default  = false
      [32m+[0m[0m name        = "k3s-cluster"
      [32m+[0m[0m owner_id    = (known after apply)
      [32m+[0m[0m owner_uuid  = (known after apply)
      [32m+[0m[0m purpose     = "HA K3s (Kubernetes) Cluster"
      [32m+[0m[0m resources   = (known after apply)
      [32m+[0m[0m updated_at  = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_project_resources.k3s_agent_nodes[0][0m will be created
[0m  [32m+[0m[0m resource "digitalocean_project_resources" "k3s_agent_nodes" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m project   = (known after apply)
      [32m+[0m[0m resources = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_project_resources.k3s_api_server_lb[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_project_resources" "k3s_api_server_lb" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m project   = (known after apply)
      [32m+[0m[0m resources = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_project_resources.k3s_ext_datastore[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_project_resources" "k3s_ext_datastore" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m project   = (known after apply)
      [32m+[0m[0m resources = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_project_resources.k3s_init_server_node[0][0m will be created
[0m  [32m+[0m[0m resource "digitalocean_project_resources" "k3s_init_server_node" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m project   = (known after apply)
      [32m+[0m[0m resources = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_project_resources.k3s_server_nodes[0][0m will be created
[0m  [32m+[0m[0m resource "digitalocean_project_resources" "k3s_server_nodes" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m project   = (known after apply)
      [32m+[0m[0m resources = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_tag.agent[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_tag" "agent" {
      [32m+[0m[0m databases_count        = (known after apply)
      [32m+[0m[0m droplets_count         = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m images_count           = (known after apply)
      [32m+[0m[0m name                   = "k3s_agent"
      [32m+[0m[0m total_resource_count   = (known after apply)
      [32m+[0m[0m volume_snapshots_count = (known after apply)
      [32m+[0m[0m volumes_count          = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_tag.server[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_tag" "server" {
      [32m+[0m[0m databases_count        = (known after apply)
      [32m+[0m[0m droplets_count         = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m images_count           = (known after apply)
      [32m+[0m[0m name                   = "k3s_server"
      [32m+[0m[0m total_resource_count   = (known after apply)
      [32m+[0m[0m volume_snapshots_count = (known after apply)
      [32m+[0m[0m volumes_count          = (known after apply)
    }

[1m  # module.ha-k3s.digitalocean_vpc.k3s_vpc[0m will be created
[0m  [32m+[0m[0m resource "digitalocean_vpc" "k3s_vpc" {
      [32m+[0m[0m created_at = (known after apply)
      [32m+[0m[0m default    = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ip_range   = "10.10.10.0/24"
      [32m+[0m[0m name       = "k3s-vpc-01"
      [32m+[0m[0m region     = "fra1"
      [32m+[0m[0m urn        = (known after apply)
    }

[1m  # module.ha-k3s.random_id.agent_node_id[0][0m will be created
[0m  [32m+[0m[0m resource "random_id" "agent_node_id" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 2
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.ha-k3s.random_id.server_node_id[0][0m will be created
[0m  [32m+[0m[0m resource "random_id" "server_node_id" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 2
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.ha-k3s.random_id.server_node_id[1][0m will be created
[0m  [32m+[0m[0m resource "random_id" "server_node_id" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 2
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.ha-k3s.random_password.k3s_token[0m will be created
[0m  [32m+[0m[0m resource "random_password" "k3s_token" {
      [32m+[0m[0m bcrypt_hash = (sensitive value)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 48
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (sensitive value)
      [32m+[0m[0m special     = false
      [32m+[0m[0m upper       = false
    }

[1mPlan:[0m 22 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_summary = {
      [32m+[0m[0m agents         = [
          [32m+[0m[0m {
              [32m+[0m[0m id         = (known after apply)
              [32m+[0m[0m ip_private = (known after apply)
              [32m+[0m[0m ip_public  = (known after apply)
              [32m+[0m[0m name       = (known after apply)
              [32m+[0m[0m price      = (known after apply)
            },
        ]
      [32m+[0m[0m api_server_ip  = (known after apply)
      [32m+[0m[0m cluster_region = "fra1"
      [32m+[0m[0m servers        = [
          [32m+[0m[0m {
              [32m+[0m[0m id         = (known after apply)
              [32m+[0m[0m ip_private = (known after apply)
              [32m+[0m[0m ip_public  = (known after apply)
              [32m+[0m[0m name       = (known after apply)
              [32m+[0m[0m price      = (known after apply)
            },
          [32m+[0m[0m {
              [32m+[0m[0m id         = (known after apply)
              [32m+[0m[0m ip_private = (known after apply)
              [32m+[0m[0m ip_public  = (known after apply)
              [32m+[0m[0m name       = (known after apply)
              [32m+[0m[0m price      = (known after apply)
            },
        ]
    }
[0m[1mmodule.ha-k3s.digitalocean_tag.agent: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_project.k3s_cluster: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_tag.server: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_vpc.k3s_vpc: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_firewall.ccm_firewall: Creating...[0m[0m
[0m[1mmodule.ha-k3s.random_id.agent_node_id[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.random_id.server_node_id[1]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.random_id.server_node_id[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.random_password.k3s_token: Creating...[0m[0m
[0m[1mmodule.ha-k3s.random_id.server_node_id[1]: Creation complete after 0s [id=bdc][0m
[0m[1mmodule.ha-k3s.random_id.server_node_id[0]: Creation complete after 0s [id=24k][0m
[0m[1mmodule.ha-k3s.random_id.agent_node_id[0]: Creation complete after 0s [id=uxY][0m
[0m[1mmodule.ha-k3s.random_password.k3s_token: Creation complete after 0s [id=none][0m
[0m[1mmodule.ha-k3s.digitalocean_tag.agent: Creation complete after 0s [id=k3s_agent][0m
[0m[1mmodule.ha-k3s.digitalocean_tag.server: Creation complete after 0s [id=k3s_server][0m
[0m[1mmodule.ha-k3s.digitalocean_firewall.k3s_firewall: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_firewall.ccm_firewall: Creation complete after 0s [id=91d1573f-09df-4e7c-be73-5ecaa283609f][0m
[0m[1mmodule.ha-k3s.digitalocean_project.k3s_cluster: Creation complete after 0s [id=67edbaf1-a14b-4bed-bcfd-bf2b5dd0dacd][0m
[0m[1mmodule.ha-k3s.digitalocean_firewall.k3s_firewall: Creation complete after 1s [id=146e28df-35a2-4eb4-8c49-d8020dbfc3dc][0m
[0m[1mmodule.ha-k3s.digitalocean_vpc.k3s_vpc: Creation complete after 1s [id=381fd46b-0a77-43c6-989a-51c9830f3204][0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_loadbalancer.k3s_lb: Creation complete after 2m0s [id=8d055576-739c-4c7a-9055-9febb3af9403][0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_api_server_lb: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_agent[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [2m0s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_api_server_lb: Creation complete after 2s [id=67edbaf1-a14b-4bed-bcfd-bf2b5dd0dacd][0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_agent[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [2m10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_agent[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [2m20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_agent[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [2m30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_agent[0]: Creation complete after 30s [id=451283655][0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_agent_nodes[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_agent_nodes[0]: Creation complete after 2s [id=67edbaf1-a14b-4bed-bcfd-bf2b5dd0dacd][0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [2m40s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [2m50s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [3m0s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [3m10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [3m20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [3m30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Still creating... [3m40s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_cluster.k3s: Creation complete after 3m48s [id=f26e1559-2543-4757-828e-d63c40a00811][0m
[0m[1mmodule.ha-k3s.digitalocean_database_user.dbuser: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_ext_datastore: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_firewall.k3s: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_user.dbuser: Creation complete after 1s [id=f26e1559-2543-4757-828e-d63c40a00811/user/k3s_default_user][0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server_init[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_database_firewall.k3s: Creation complete after 1s [id=f26e1559-2543-4757-828e-d63c40a00811-20241013034608235000000001][0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_ext_datastore: Creation complete after 3s [id=67edbaf1-a14b-4bed-bcfd-bf2b5dd0dacd][0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server_init[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server_init[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server_init[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server_init[0]: Creation complete after 31s [id=451283864][0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_init_server_node[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_init_server_node[0]: Creation complete after 2s [id=67edbaf1-a14b-4bed-bcfd-bf2b5dd0dacd][0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.ha-k3s.digitalocean_droplet.k3s_server[0]: Creation complete after 30s [id=451283910][0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_server_nodes[0]: Creating...[0m[0m
[0m[1mmodule.ha-k3s.digitalocean_project_resources.k3s_server_nodes[0]: Creation complete after 3s [id=67edbaf1-a14b-4bed-bcfd-bf2b5dd0dacd][0m
[0m[1m[32m
Apply complete! Resources: 22 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcluster_summary = {
  "agents" = [
    {
      "id" = "451283655"
      "ip_private" = "10.10.10.4"
      "ip_public" = "165.22.31.102"
      "name" = "k3s-agent-fra1-bb16-1"
      "price" = 12
    },
  ]
  "api_server_ip" = "209.38.190.80"
  "cluster_region" = "fra1"
  "servers" = [
    {
      "id" = "451283864"
      "ip_private" = "10.10.10.5"
      "ip_public" = "159.65.115.179"
      "name" = "k3s-server-fra1-db89-1"
      "price" = 12
    },
    {
      "id" = "451283910"
      "ip_private" = "10.10.10.6"
      "ip_public" = "157.230.102.74"
      "name" = "k3s-server-fra1-6dd7-2"
      "price" = 12
    },
  ]
}
[digital_ocean_k3s_workflow] Adding cluster to Kubectl configuration...
[digital_ocean_k3s_workflow] Copying K3S config file from server to local kubectl...
[digital_ocean_k3s_workflow] Checking K3S cluster nodes...
NAME                     STATUS   ROLES                  AGE   VERSION
k3s-server-fra1-6dd7-2   Ready    control-plane,master   38s   v1.30.5+k3s1
k3s-server-fra1-db89-1   Ready    control-plane,master   46s   v1.30.5+k3s1
2024-10-13 03:49:27.115426848 [executor] Finished!

2024-10-13 03:49:27,122 INFO - ContAudITWrapper#1 - Running post-command actions...
2024-10-13 03:49:27,122 INFO - ContAudITWrapper#1 - Analyzing current environment state...
2024-10-13 03:49:27,126 INFO - ContAudITWrapper#1 - Saving current environment state...
2024-10-13 03:49:27,127 INFO - ContAudITWrapper#1 - Environment state hash: a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a
2024-10-13 03:49:27,127 INFO - ContAudITWrapper#1 - Checking environment diff...
2024-10-13 03:49:27,130 INFO - ContAudITWrapper#1 - Environment diff: 
2024-10-13 03:49:27,131 INFO - ContAudITWrapper#1 - Cleaning temporary files...
2024-10-13 03:49:27,134 INFO - ContAudITWrapper#1 - Sending to blockchain...
2024-10-13 03:49:29,890 INFO - ContAudITWrapper#1 - Response 
2024-10-13 03:49:29,892 INFO - ContAudITWrapper#1 - Finishing ContAudIT Wrapper...
